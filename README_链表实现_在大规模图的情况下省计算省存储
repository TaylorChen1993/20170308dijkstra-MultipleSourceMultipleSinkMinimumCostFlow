一句话描述：
先用dijkstra算法得到一个解，然后以这个解为界，用枚举算多源点多汇点最小费用流

1.dijkstra得到一个初始解：
假设各边容量无限，一个消费节点的需求均由一台服务器节点供给。
将每个消费节点处设置一台服务器，作为费用下界
用dijkstra算法对所有消费节点可达点按费用逐渐递增，
路径上的单位费用<服务器价格/需求量
在各消费节点可达的公共点处设置服务器，与上一轮的费用比较，并保留较优解。
由服务器节点向消费节点提供服务，容量无法满足时，在消费节点处新设一台服务器。

2.枚举：
以第一步所得较小费用/服务器价格为服务器台数，对图中所有结点进行枚举。
注意，目标图中，向每一个消费节点供应的总费用<一台服务器费用
将其假设为需求量多的若干路径，则必有一条路径<一台服务器费用/需求量
故，对于每个消费节点，必有一台服务器位于路径单位费用<一台服务器费用/需求量范围内
以此可以减小搜索空间。

算法描述：
Deploy
->GraphInArray.java//使用内部类GraphContent创建有向图的矩阵,并对Dijkstra所用数据进行初始化
	数据域:
	routerAmount
	undirectedEdgeAmount
	consumerAmount
	serverUnitPrice
	
	capacityInRouterToRouterMatrix//为新增的单源单汇设置一行一列
	unitCostInRouterToRouterMatrix//为新增的单源单汇设置一行一列
	
	minimalUnitCostInConsumerToRouterMatrixUsingDijkstraShortestPath
	
->MinorSolutionUsingDijkstra.java//使用内部类OneInfeasibleSolutionUsingDijkstra创建解的有向图
	OneInfeasibleSolutionUsingDijkstra中的数据域:
		总费用,
		指向父解的指针,
		{
			{服务器1所在点，与被服务器提供服务的消费节点相邻的网络节点集={8,9},最小费用矩阵即最短路径},//是一个对象
			{服务器2所在点，与被服务器提供服务的消费节点相邻的网络节点集={8,9},最小费用矩阵即最短路径},
			...
			{服务器n所在点，与被服务器提供服务的消费节点相邻的网络节点集={8,9},最小费用矩阵即最短路径},
		}
->EnumerateSolution.java//使用内部类OneSolutionUsingMultipleSourceMultipleSink
	OneSolutionUsingEnumerateAndMultipleSourceMultipleSink中的数据结构
		总费用,
		容量矩阵，
		费用矩阵,
		{
			路径1={起始服务器，网络节点a1,...网络节点aN，终止网络节点，消费节点，容量，费用},
			路径2={起始服务器，网络节点a1,...网络节点aN，终止网络节点，消费节点，容量，费用},
			...
			路径n={起始服务器，网络节点a1,...网络节点aN，终止网络节点，消费节点，容量，费用},
		}





